id = \x. \y: x. y -- since the types that ben lynn's site shows us aren't that useful sometimes, we'll use this to type check manually
arrow = \x y. pi a: x. y -- syntactic sugar arrows are not real and should be trusted(??)
eq = \t. \x: t. \y: t. pi f: t->*. f x->f y
comp = \h i j. \f: (i->j). \g: (h->i). \a: h. f (g a)

eqRefl = id (pi t. pi x: t. eq t x x) (\t. \x: t. \f: t->*. id (f x))
--eqSymm = id (pi t. pi x: t. pi y: t. (eq t x y)->(eq t y x)) (\t. \x: t. \y: t. \e: eq t x y. \f: t->*. \fy: f y. ???)
-- eqTrans = id (pi w x y. (eq w x) -> (eq x y) -> (eq w y)) (\w x y. \ewx: eq w x. \exy: eq x y. \z. comp (w->z) (x->z) (y->z) (exy z) (ewx z)) gotta update this too

nat = pi x. (x->x)->(x->x)
zeroNat = id nat (\x. \y: (x->x). \z: x. z)
succNat = id (nat->nat) (\n: nat. \x. \y: (x->x). \z: x. y (n x y z))
